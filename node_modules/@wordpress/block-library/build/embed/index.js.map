{"version":3,"sources":["@wordpress/block-library/src/embed/index.js"],"names":["name","settings","title","description","icon","embedContentIcon","responsive","transforms","from","type","isMatch","node","nodeName","test","textContent","transform","url","trim","common","commonEmbeds","map","embedDefinition","others","otherEmbeds"],"mappings":";;;;;;;;;;;AAGA;;AACA;;AACA;;AAKA;;AACA;;;;;;AAEO,IAAMA,IAAI,GAAG,YAAb;;AAEA,IAAMC,QAAQ,GAAG,qCAAuB;AAC9CC,EAAAA,KAAK,EAAE,cAAI,OAAJ,EAAa,aAAb,CADuC;AAE9CC,EAAAA,WAAW,EAAE,cACZ,+EADY,CAFiC;AAK9CC,EAAAA,IAAI,EAAEC,uBALwC;AAM9C;AACAC,EAAAA,UAAU,EAAE,KAPkC;AAQ9CC,EAAAA,UAAU,EAAE;AACXC,IAAAA,IAAI,EAAE,CACL;AACCC,MAAAA,IAAI,EAAE,KADP;AAECC,MAAAA,OAAO,EAAE,iBAAEC,IAAF;AAAA,eACRA,IAAI,CAACC,QAAL,KAAkB,GAAlB,IACA,4BAA4BC,IAA5B,CAAkCF,IAAI,CAACG,WAAvC,CAFQ;AAAA,OAFV;AAKCC,MAAAA,SAAS,EAAE,mBAAEJ,IAAF,EAAY;AACtB,eAAO,yBAAa,YAAb,EAA2B;AACjCK,UAAAA,GAAG,EAAEL,IAAI,CAACG,WAAL,CAAiBG,IAAjB;AAD4B,SAA3B,CAAP;AAGA;AATF,KADK;AADK;AARkC,CAAvB,CAAjB;;;AAyBA,IAAMC,MAAM,GAAGC,mBAAaC,GAAb,CAAkB,UAAEC,eAAF,EAAuB;AAC9D,2BACIA,eADJ;AAECpB,IAAAA,QAAQ,EAAE,qCAAuBoB,eAAe,CAACpB,QAAvC;AAFX;AAIA,CALqB,CAAf;;;;AAOA,IAAMqB,MAAM,GAAGC,mBAAYH,GAAZ,CAAiB,UAAEC,eAAF,EAAuB;AAC7D,2BACIA,eADJ;AAECpB,IAAAA,QAAQ,EAAE,qCAAuBoB,eAAe,CAACpB,QAAvC;AAFX;AAIA,CALqB,CAAf","sourcesContent":["/**\n * Internal dependencies\n */\nimport { common as commonEmbeds, others as otherEmbeds } from './core-embeds';\nimport { embedContentIcon } from './icons';\nimport { getEmbedBlockSettings } from './settings';\n\n/**\n * WordPress dependencies\n */\nimport { __, _x } from '@wordpress/i18n';\nimport { createBlock } from '@wordpress/blocks';\n\nexport const name = 'core/embed';\n\nexport const settings = getEmbedBlockSettings( {\n\ttitle: _x( 'Embed', 'block title' ),\n\tdescription: __(\n\t\t'Embed videos, images, tweets, audio, and other content from external sources.'\n\t),\n\ticon: embedContentIcon,\n\t// Unknown embeds should not be responsive by default.\n\tresponsive: false,\n\ttransforms: {\n\t\tfrom: [\n\t\t\t{\n\t\t\t\ttype: 'raw',\n\t\t\t\tisMatch: ( node ) =>\n\t\t\t\t\tnode.nodeName === 'P' &&\n\t\t\t\t\t/^\\s*(https?:\\/\\/\\S+)\\s*$/i.test( node.textContent ),\n\t\t\t\ttransform: ( node ) => {\n\t\t\t\t\treturn createBlock( 'core/embed', {\n\t\t\t\t\t\turl: node.textContent.trim(),\n\t\t\t\t\t} );\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n} );\n\nexport const common = commonEmbeds.map( ( embedDefinition ) => {\n\treturn {\n\t\t...embedDefinition,\n\t\tsettings: getEmbedBlockSettings( embedDefinition.settings ),\n\t};\n} );\n\nexport const others = otherEmbeds.map( ( embedDefinition ) => {\n\treturn {\n\t\t...embedDefinition,\n\t\tsettings: getEmbedBlockSettings( embedDefinition.settings ),\n\t};\n} );\n"]}