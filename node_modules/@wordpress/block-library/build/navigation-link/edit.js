"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _compose = require("@wordpress/compose");

var _blocks = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _keycodes = require("@wordpress/keycodes");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _url = require("@wordpress/url");

var _dom = require("@wordpress/dom");

var _icons = require("./icons");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function NavigationLinkEdit(_ref) {
  var attributes = _ref.attributes,
      hasDescendants = _ref.hasDescendants,
      isSelected = _ref.isSelected,
      isParentOfSelectedBlock = _ref.isParentOfSelectedBlock,
      setAttributes = _ref.setAttributes,
      showSubmenuIcon = _ref.showSubmenuIcon,
      insertLinkBlock = _ref.insertLinkBlock;
  var label = attributes.label,
      opensInNewTab = attributes.opensInNewTab,
      title = attributes.title,
      url = attributes.url,
      nofollow = attributes.nofollow,
      description = attributes.description;
  var link = {
    title: title ? (0, _lodash.unescape)(title) : '',
    url: url,
    opensInNewTab: opensInNewTab
  };

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isLinkOpen = _useState2[0],
      setIsLinkOpen = _useState2[1];

  var itemLabelPlaceholder = (0, _i18n.__)('Add linkâ€¦');
  var ref = (0, _element.useRef)(); // Show the LinkControl on mount if the URL is empty
  // ( When adding a new menu item)
  // This can't be done in the useState call because it cconflicts
  // with the autofocus behavior of the BlockListBlock component.

  (0, _element.useEffect)(function () {
    if (!url) {
      setIsLinkOpen(true);
    }
  }, []);
  /**
   * The hook shouldn't be necessary but due to a focus loss happening
   * when selecting a suggestion in the link popover, we force close on block unselection.
   */

  (0, _element.useEffect)(function () {
    if (!isSelected) {
      setIsLinkOpen(false);
    }
  }, [isSelected]); // If the LinkControl popover is open and the URL has changed, close the LinkControl and focus the label text.

  (0, _element.useEffect)(function () {
    if (isLinkOpen && url) {
      // Close the link.
      setIsLinkOpen(false); // Does this look like a URL and have something TLD-ish?

      if ((0, _url.isURL)((0, _url.prependHTTP)(label)) && /^.+\.[a-z]+/.test(label)) {
        // Focus and select the label text.
        selectLabelText();
      } else {
        // Focus it (but do not select).
        (0, _dom.placeCaretAtHorizontalEdge)(ref.current, true);
      }
    }
  }, [url]);
  /**
   * Focus the navigation link label text and select it.
   */

  function selectLabelText() {
    ref.current.focus();
    var selection = window.getSelection();
    var range = document.createRange(); // Get the range of the current ref contents so we can add this range to the selection.

    range.selectNodeContents(ref.current);
    selection.removeAllRanges();
    selection.addRange(range);
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_components.KeyboardShortcuts, {
    bindGlobal: true,
    shortcuts: (0, _defineProperty2.default)({}, _keycodes.rawShortcut.primary('k'), function () {
      return setIsLinkOpen(true);
    })
  }), (0, _element.createElement)(_components.ToolbarButton, {
    name: "link",
    icon: "admin-links",
    title: (0, _i18n.__)('Link'),
    shortcut: _keycodes.displayShortcut.primary('k'),
    onClick: function onClick() {
      return setIsLinkOpen(true);
    }
  }), (0, _element.createElement)(_components.ToolbarButton, {
    name: "submenu",
    icon: _icons.toolbarSubmenuIcon,
    title: (0, _i18n.__)('Add submenu'),
    onClick: insertLinkBlock
  }))), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('SEO settings')
  }, (0, _element.createElement)(_components.TextControl, {
    value: title || '',
    onChange: function onChange(titleValue) {
      setAttributes({
        title: titleValue
      });
    },
    label: (0, _i18n.__)('Title Attribute'),
    help: (0, _i18n.__)('Provide more context about where the link goes.')
  }), (0, _element.createElement)(_components.ToggleControl, {
    checked: nofollow,
    onChange: function onChange(nofollowValue) {
      setAttributes({
        nofollow: nofollowValue
      });
    },
    label: (0, _i18n.__)('Add nofollow to link'),
    help: (0, _element.createElement)(_element.Fragment, null, (0, _i18n.__)("Don't let search engines follow this link."), (0, _element.createElement)(_components.ExternalLink, {
      className: "wp-block-navigation-link__nofollow-external-link",
      href: (0, _i18n.__)('https://codex.wordpress.org/Nofollow')
    }, (0, _i18n.__)("What's this?")))
  })), (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Link settings')
  }, (0, _element.createElement)(_components.TextareaControl, {
    value: description || '',
    onChange: function onChange(descriptionValue) {
      setAttributes({
        description: descriptionValue
      });
    },
    label: (0, _i18n.__)('Description'),
    help: (0, _i18n.__)('The description will be displayed in the menu if the current theme supports it.')
  }))), (0, _element.createElement)("div", {
    className: (0, _classnames.default)('wp-block-navigation-link', {
      'is-editing': isSelected || isParentOfSelectedBlock,
      'is-selected': isSelected,
      'has-link': !!url
    })
  }, (0, _element.createElement)("div", {
    className: "wp-block-navigation-link__content"
  }, (0, _element.createElement)(_blockEditor.RichText, {
    ref: ref,
    tagName: "span",
    className: "wp-block-navigation-link__label",
    value: label,
    onChange: function onChange(labelValue) {
      return setAttributes({
        label: labelValue
      });
    },
    placeholder: itemLabelPlaceholder,
    withoutInteractiveFormatting: true,
    allowedFormats: ['core/bold', 'core/italic', 'core/image', 'core/strikethrough']
  }), showSubmenuIcon && (0, _element.createElement)("span", {
    className: "wp-block-navigation-link__submenu-icon"
  }, _icons.itemSubmenuIcon), isLinkOpen && (0, _element.createElement)(_components.Popover, {
    position: "bottom center",
    onClose: function onClose() {
      return setIsLinkOpen(false);
    }
  }, (0, _element.createElement)(_blockEditor.__experimentalLinkControl, {
    className: "wp-block-navigation-link__inline-link-input",
    value: link,
    showInitialSuggestions: true,
    onChange: function onChange() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$title = _ref3.title,
          newTitle = _ref3$title === void 0 ? '' : _ref3$title,
          _ref3$url = _ref3.url,
          newURL = _ref3$url === void 0 ? '' : _ref3$url,
          newOpensInNewTab = _ref3.opensInNewTab,
          id = _ref3.id;

      return setAttributes({
        title: (0, _lodash.escape)(newTitle),
        url: encodeURI(newURL),
        label: function () {
          var normalizedTitle = newTitle.replace(/http(s?):\/\//gi, '');
          var normalizedURL = newURL.replace(/http(s?):\/\//gi, '');

          if (newTitle !== '' && normalizedTitle !== normalizedURL && label !== newTitle) {
            return (0, _lodash.escape)(newTitle);
          } else if (label) {
            return label;
          } // If there's no label, add the URL.


          return (0, _lodash.escape)(normalizedURL);
        }(),
        opensInNewTab: newOpensInNewTab,
        id: id
      });
    }
  }))), (0, _element.createElement)(_blockEditor.InnerBlocks, {
    allowedBlocks: ['core/navigation-link'],
    renderAppender: hasDescendants && isSelected || isParentOfSelectedBlock ? _blockEditor.InnerBlocks.DefaultAppender : false
  })));
}

var _default = (0, _compose.compose)([(0, _data.withSelect)(function (select, ownProps) {
  var _select = select('core/block-editor'),
      getBlockName = _select.getBlockName,
      getBlockAttributes = _select.getBlockAttributes,
      getBlockParents = _select.getBlockParents,
      getClientIdsOfDescendants = _select.getClientIdsOfDescendants,
      hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

  var clientId = ownProps.clientId;
  var rootBlock = getBlockParents(clientId)[0];
  var parentBlock = getBlockParents(clientId, true)[0];
  var rootBlockAttributes = getBlockAttributes(rootBlock);
  var hasDescendants = !!getClientIdsOfDescendants([clientId]).length;
  var isLevelZero = getBlockName(parentBlock) === 'core/navigation';
  var showSubmenuIcon = rootBlockAttributes.showSubmenuIcon && isLevelZero && hasDescendants;
  var isParentOfSelectedBlock = hasSelectedInnerBlock(clientId, true);
  return {
    isParentOfSelectedBlock: isParentOfSelectedBlock,
    hasDescendants: hasDescendants,
    showSubmenuIcon: showSubmenuIcon
  };
}), (0, _data.withDispatch)(function (dispatch, ownProps, registry) {
  return {
    insertLinkBlock: function insertLinkBlock() {
      var clientId = ownProps.clientId;

      var _dispatch = dispatch('core/block-editor'),
          insertBlock = _dispatch.insertBlock;

      var _registry$select = registry.select('core/block-editor'),
          getClientIdsOfDescendants = _registry$select.getClientIdsOfDescendants;

      var navItems = getClientIdsOfDescendants([clientId]);
      var insertionPoint = navItems.length ? navItems.length : 0;
      var blockToInsert = (0, _blocks.createBlock)('core/navigation-link');
      insertBlock(blockToInsert, insertionPoint, clientId);
    }
  };
})])(NavigationLinkEdit);

exports.default = _default;
//# sourceMappingURL=edit.js.map