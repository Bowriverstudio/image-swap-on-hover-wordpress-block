{"version":3,"sources":["@wordpress/block-library/src/paragraph/edit.js"],"names":["window","getComputedStyle","querySelector","document","bind","name","PARAGRAPH_DROP_CAP_SELECTOR","ParagraphRTLToolbar","direction","setDirection","isRTL","select","getSettings","icon","title","isActive","onClick","undefined","useDropCapMinimumHeight","isDropCap","deps","minimumHeight","setMinimumHeight","element","lineHeight","ParagraphBlock","attributes","className","fontSize","mergeBlocks","onReplace","setAttributes","setFontSize","align","content","dropCap","placeholder","ref","dropCapMinimumHeight","size","property","contrastCheckers","backgroundColor","textColor","colorDetector","targetRef","TextColor","BackgroundColor","InspectorControlsColorPanel","newAlign","newDirection","class","minHeight","newContent","value","ParagraphEdit"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { __, _x } from '@wordpress/i18n';\nimport { PanelBody, ToggleControl, ToolbarGroup } from '@wordpress/components';\nimport {\n\tAlignmentToolbar,\n\tBlockControls,\n\tFontSizePicker,\n\tInspectorControls,\n\tRichText,\n\twithFontSizes,\n\t__experimentalUseColors,\n} from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\nimport { compose } from '@wordpress/compose';\nimport { useSelect } from '@wordpress/data';\nimport { useEffect, useState, useRef } from '@wordpress/element';\n\n/**\n * Browser dependencies\n */\nconst { getComputedStyle } = window;\nconst querySelector = window.document.querySelector.bind( document );\n\nconst name = 'core/paragraph';\nconst PARAGRAPH_DROP_CAP_SELECTOR = 'p.has-drop-cap';\n\nfunction ParagraphRTLToolbar( { direction, setDirection } ) {\n\tconst isRTL = useSelect( ( select ) => {\n\t\treturn !! select( 'core/block-editor' ).getSettings().isRTL;\n\t}, [] );\n\n\treturn (\n\t\tisRTL && (\n\t\t\t<ToolbarGroup\n\t\t\t\tcontrols={ [\n\t\t\t\t\t{\n\t\t\t\t\t\ticon: 'editor-ltr',\n\t\t\t\t\t\ttitle: _x( 'Left to right', 'editor button' ),\n\t\t\t\t\t\tisActive: direction === 'ltr',\n\t\t\t\t\t\tonClick() {\n\t\t\t\t\t\t\tsetDirection(\n\t\t\t\t\t\t\t\tdirection === 'ltr' ? undefined : 'ltr'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t] }\n\t\t\t/>\n\t\t)\n\t);\n}\n\nfunction useDropCapMinimumHeight( isDropCap, deps ) {\n\tconst [ minimumHeight, setMinimumHeight ] = useState();\n\tuseEffect( () => {\n\t\tconst element = querySelector( PARAGRAPH_DROP_CAP_SELECTOR );\n\t\tif ( isDropCap && element ) {\n\t\t\tsetMinimumHeight(\n\t\t\t\tgetComputedStyle( element, 'first-letter' ).lineHeight\n\t\t\t);\n\t\t} else if ( minimumHeight ) {\n\t\t\tsetMinimumHeight( undefined );\n\t\t}\n\t}, [ isDropCap, minimumHeight, setMinimumHeight, ...deps ] );\n\treturn minimumHeight;\n}\n\nfunction ParagraphBlock( {\n\tattributes,\n\tclassName,\n\tfontSize,\n\tmergeBlocks,\n\tonReplace,\n\tsetAttributes,\n\tsetFontSize,\n} ) {\n\tconst { align, content, dropCap, placeholder, direction } = attributes;\n\n\tconst ref = useRef();\n\tconst dropCapMinimumHeight = useDropCapMinimumHeight( dropCap, [\n\t\tfontSize.size,\n\t] );\n\tconst {\n\t\tTextColor,\n\t\tBackgroundColor,\n\t\tInspectorControlsColorPanel,\n\t} = __experimentalUseColors(\n\t\t[\n\t\t\t{ name: 'textColor', property: 'color' },\n\t\t\t{ name: 'backgroundColor', className: 'has-background' },\n\t\t],\n\t\t{\n\t\t\tcontrastCheckers: [\n\t\t\t\t{\n\t\t\t\t\tbackgroundColor: true,\n\t\t\t\t\ttextColor: true,\n\t\t\t\t\tfontSize: fontSize.size,\n\t\t\t\t},\n\t\t\t],\n\t\t\tcolorDetector: { targetRef: ref },\n\t\t},\n\t\t[ fontSize.size ]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls>\n\t\t\t\t<AlignmentToolbar\n\t\t\t\t\tvalue={ align }\n\t\t\t\t\tonChange={ ( newAlign ) =>\n\t\t\t\t\t\tsetAttributes( { align: newAlign } )\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<ParagraphRTLToolbar\n\t\t\t\t\tdirection={ direction }\n\t\t\t\t\tsetDirection={ ( newDirection ) =>\n\t\t\t\t\t\tsetAttributes( { direction: newDirection } )\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Text settings' ) }>\n\t\t\t\t\t<FontSizePicker\n\t\t\t\t\t\tvalue={ fontSize.size }\n\t\t\t\t\t\tonChange={ setFontSize }\n\t\t\t\t\t/>\n\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\tlabel={ __( 'Drop Cap' ) }\n\t\t\t\t\t\tchecked={ !! dropCap }\n\t\t\t\t\t\tonChange={ () =>\n\t\t\t\t\t\t\tsetAttributes( { dropCap: ! dropCap } )\n\t\t\t\t\t\t}\n\t\t\t\t\t\thelp={\n\t\t\t\t\t\t\tdropCap\n\t\t\t\t\t\t\t\t? __( 'Showing large initial letter.' )\n\t\t\t\t\t\t\t\t: __( 'Toggle to show a large initial letter.' )\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t{ InspectorControlsColorPanel }\n\t\t\t<BackgroundColor>\n\t\t\t\t<TextColor>\n\t\t\t\t\t<RichText\n\t\t\t\t\t\tref={ ref }\n\t\t\t\t\t\tidentifier=\"content\"\n\t\t\t\t\t\ttagName=\"p\"\n\t\t\t\t\t\tclassName={ classnames(\n\t\t\t\t\t\t\t'wp-block-paragraph',\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'has-drop-cap': dropCap,\n\t\t\t\t\t\t\t\t[ `has-text-align-${ align }` ]: align,\n\t\t\t\t\t\t\t\t[ fontSize.class ]: fontSize.class,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t) }\n\t\t\t\t\t\tstyle={ {\n\t\t\t\t\t\t\tfontSize: fontSize.size\n\t\t\t\t\t\t\t\t? fontSize.size + 'px'\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\tdirection,\n\t\t\t\t\t\t\tminHeight: dropCapMinimumHeight,\n\t\t\t\t\t\t} }\n\t\t\t\t\t\tvalue={ content }\n\t\t\t\t\t\tonChange={ ( newContent ) =>\n\t\t\t\t\t\t\tsetAttributes( { content: newContent } )\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonSplit={ ( value ) => {\n\t\t\t\t\t\t\tif ( ! value ) {\n\t\t\t\t\t\t\t\treturn createBlock( name );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn createBlock( name, {\n\t\t\t\t\t\t\t\t...attributes,\n\t\t\t\t\t\t\t\tcontent: value,\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} }\n\t\t\t\t\t\tonMerge={ mergeBlocks }\n\t\t\t\t\t\tonReplace={ onReplace }\n\t\t\t\t\t\tonRemove={\n\t\t\t\t\t\t\tonReplace ? () => onReplace( [] ) : undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\taria-label={\n\t\t\t\t\t\t\tcontent\n\t\t\t\t\t\t\t\t? __( 'Paragraph block' )\n\t\t\t\t\t\t\t\t: __(\n\t\t\t\t\t\t\t\t\t\t'Empty block; start writing or type forward slash to choose a block'\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\tplaceholder ||\n\t\t\t\t\t\t\t__( 'Start writing or type / to choose a block' )\n\t\t\t\t\t\t}\n\t\t\t\t\t\t__unstableEmbedURLOnPaste\n\t\t\t\t\t\t__unstableAllowPrefixTransformations\n\t\t\t\t\t/>\n\t\t\t\t</TextColor>\n\t\t\t</BackgroundColor>\n\t\t</>\n\t);\n}\n\nconst ParagraphEdit = compose( [ withFontSizes( 'fontSize' ) ] )(\n\tParagraphBlock\n);\n\nexport default ParagraphEdit;\n"]}