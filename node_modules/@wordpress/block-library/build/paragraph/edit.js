"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _blocks = require("@wordpress/blocks");

var _compose = require("@wordpress/compose");

var _data = require("@wordpress/data");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Browser dependencies
 */
var _window = window,
    getComputedStyle = _window.getComputedStyle;
var querySelector = window.document.querySelector.bind(document);
var name = 'core/paragraph';
var PARAGRAPH_DROP_CAP_SELECTOR = 'p.has-drop-cap';

function ParagraphRTLToolbar(_ref) {
  var direction = _ref.direction,
      setDirection = _ref.setDirection;
  var isRTL = (0, _data.useSelect)(function (select) {
    return !!select('core/block-editor').getSettings().isRTL;
  }, []);
  return isRTL && (0, _element.createElement)(_components.ToolbarGroup, {
    controls: [{
      icon: 'editor-ltr',
      title: (0, _i18n._x)('Left to right', 'editor button'),
      isActive: direction === 'ltr',
      onClick: function onClick() {
        setDirection(direction === 'ltr' ? undefined : 'ltr');
      }
    }]
  });
}

function useDropCapMinimumHeight(isDropCap, deps) {
  var _useState = (0, _element.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      minimumHeight = _useState2[0],
      setMinimumHeight = _useState2[1];

  (0, _element.useEffect)(function () {
    var element = querySelector(PARAGRAPH_DROP_CAP_SELECTOR);

    if (isDropCap && element) {
      setMinimumHeight(getComputedStyle(element, 'first-letter').lineHeight);
    } else if (minimumHeight) {
      setMinimumHeight(undefined);
    }
  }, [isDropCap, minimumHeight, setMinimumHeight].concat((0, _toConsumableArray2.default)(deps)));
  return minimumHeight;
}

function ParagraphBlock(_ref2) {
  var _classnames;

  var attributes = _ref2.attributes,
      className = _ref2.className,
      fontSize = _ref2.fontSize,
      mergeBlocks = _ref2.mergeBlocks,
      onReplace = _ref2.onReplace,
      setAttributes = _ref2.setAttributes,
      setFontSize = _ref2.setFontSize;
  var align = attributes.align,
      content = attributes.content,
      dropCap = attributes.dropCap,
      placeholder = attributes.placeholder,
      direction = attributes.direction;
  var ref = (0, _element.useRef)();
  var dropCapMinimumHeight = useDropCapMinimumHeight(dropCap, [fontSize.size]);

  var _experimentalUseColo = (0, _blockEditor.__experimentalUseColors)([{
    name: 'textColor',
    property: 'color'
  }, {
    name: 'backgroundColor',
    className: 'has-background'
  }], {
    contrastCheckers: [{
      backgroundColor: true,
      textColor: true,
      fontSize: fontSize.size
    }],
    colorDetector: {
      targetRef: ref
    }
  }, [fontSize.size]),
      TextColor = _experimentalUseColo.TextColor,
      BackgroundColor = _experimentalUseColo.BackgroundColor,
      InspectorControlsColorPanel = _experimentalUseColo.InspectorControlsColorPanel;

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_blockEditor.AlignmentToolbar, {
    value: align,
    onChange: function onChange(newAlign) {
      return setAttributes({
        align: newAlign
      });
    }
  }), (0, _element.createElement)(ParagraphRTLToolbar, {
    direction: direction,
    setDirection: function setDirection(newDirection) {
      return setAttributes({
        direction: newDirection
      });
    }
  })), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Text settings')
  }, (0, _element.createElement)(_blockEditor.FontSizePicker, {
    value: fontSize.size,
    onChange: setFontSize
  }), (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Drop Cap'),
    checked: !!dropCap,
    onChange: function onChange() {
      return setAttributes({
        dropCap: !dropCap
      });
    },
    help: dropCap ? (0, _i18n.__)('Showing large initial letter.') : (0, _i18n.__)('Toggle to show a large initial letter.')
  }))), InspectorControlsColorPanel, (0, _element.createElement)(BackgroundColor, null, (0, _element.createElement)(TextColor, null, (0, _element.createElement)(_blockEditor.RichText, {
    ref: ref,
    identifier: "content",
    tagName: "p",
    className: (0, _classnames2.default)('wp-block-paragraph', className, (_classnames = {
      'has-drop-cap': dropCap
    }, (0, _defineProperty2.default)(_classnames, "has-text-align-".concat(align), align), (0, _defineProperty2.default)(_classnames, fontSize.class, fontSize.class), _classnames)),
    style: {
      fontSize: fontSize.size ? fontSize.size + 'px' : undefined,
      direction: direction,
      minHeight: dropCapMinimumHeight
    },
    value: content,
    onChange: function onChange(newContent) {
      return setAttributes({
        content: newContent
      });
    },
    onSplit: function onSplit(value) {
      if (!value) {
        return (0, _blocks.createBlock)(name);
      }

      return (0, _blocks.createBlock)(name, _objectSpread({}, attributes, {
        content: value
      }));
    },
    onMerge: mergeBlocks,
    onReplace: onReplace,
    onRemove: onReplace ? function () {
      return onReplace([]);
    } : undefined,
    "aria-label": content ? (0, _i18n.__)('Paragraph block') : (0, _i18n.__)('Empty block; start writing or type forward slash to choose a block'),
    placeholder: placeholder || (0, _i18n.__)('Start writing or type / to choose a block'),
    __unstableEmbedURLOnPaste: true,
    __unstableAllowPrefixTransformations: true
  }))));
}

var ParagraphEdit = (0, _compose.compose)([(0, _blockEditor.withFontSizes)('fontSize')])(ParagraphBlock);
var _default = ParagraphEdit;
exports.default = _default;
//# sourceMappingURL=edit.js.map