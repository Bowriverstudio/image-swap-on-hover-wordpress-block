{"version":3,"sources":["@wordpress/block-library/src/columns/edit.js"],"names":["ALLOWED_BLOCKS","ColumnsEditContainer","attributes","className","updateAlignment","updateColumns","clientId","verticalAlignment","select","count","getBlockCount","name","BackgroundColor","InspectorControlsColorPanel","classes","value","ColumnsEditContainerWrapper","dispatch","ownProps","registry","setAttributes","updateBlockAttributes","getBlockOrder","innerBlockClientIds","forEach","innerBlockClientId","previousColumns","newColumns","replaceInnerBlocks","getBlocks","innerBlocks","hasExplicitWidths","isAddingColumn","newColumnWidth","widths","width","createBlocksFromInnerBlocksTemplate","innerBlocksTemplate","ColumnsEdit","props","__experimentalGetBlockVariations","getBlockType","__experimentalGetDefaultBlockVariation","blockType","defaultVariation","hasInnerBlocks","length","variations","nextVariation"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { dropRight, get, map, times } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { PanelBody, RangeControl } from '@wordpress/components';\nimport {\n\tInspectorControls,\n\tInnerBlocks,\n\tBlockControls,\n\tBlockVerticalAlignmentToolbar,\n\t__experimentalBlockVariationPicker,\n\t__experimentalUseColors,\n} from '@wordpress/block-editor';\nimport { withDispatch, useDispatch, useSelect } from '@wordpress/data';\nimport { createBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport {\n\thasExplicitColumnWidths,\n\tgetMappedColumnWidths,\n\tgetRedistributedColumnWidths,\n\ttoWidthPrecision,\n} from './utils';\n\n/**\n * Allowed blocks constant is passed to InnerBlocks precisely as specified here.\n * The contents of the array should never change.\n * The array should contain the name of each block that is allowed.\n * In columns block, the only block we allow is 'core/column'.\n *\n * @constant\n * @type {string[]}\n */\nconst ALLOWED_BLOCKS = [ 'core/column' ];\n\nfunction ColumnsEditContainer( {\n\tattributes,\n\tclassName,\n\tupdateAlignment,\n\tupdateColumns,\n\tclientId,\n} ) {\n\tconst { verticalAlignment } = attributes;\n\n\tconst { count } = useSelect(\n\t\t( select ) => {\n\t\t\treturn {\n\t\t\t\tcount: select( 'core/block-editor' ).getBlockCount( clientId ),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst {\n\t\tBackgroundColor,\n\t\tInspectorControlsColorPanel,\n\t} = __experimentalUseColors( [\n\t\t{ name: 'backgroundColor', className: 'has-background' },\n\t] );\n\n\tconst classes = classnames( className, {\n\t\t[ `are-vertically-aligned-${ verticalAlignment }` ]: verticalAlignment,\n\t} );\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls>\n\t\t\t\t<BlockVerticalAlignmentToolbar\n\t\t\t\t\tonChange={ updateAlignment }\n\t\t\t\t\tvalue={ verticalAlignment }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody>\n\t\t\t\t\t<RangeControl\n\t\t\t\t\t\tlabel={ __( 'Columns' ) }\n\t\t\t\t\t\tvalue={ count }\n\t\t\t\t\t\tonChange={ ( value ) => updateColumns( count, value ) }\n\t\t\t\t\t\tmin={ 2 }\n\t\t\t\t\t\tmax={ 6 }\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t{ InspectorControlsColorPanel }\n\t\t\t<BackgroundColor>\n\t\t\t\t<div className={ classes }>\n\t\t\t\t\t<InnerBlocks\n\t\t\t\t\t\ttemplateLock=\"all\"\n\t\t\t\t\t\tallowedBlocks={ ALLOWED_BLOCKS }\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</BackgroundColor>\n\t\t</>\n\t);\n}\n\nconst ColumnsEditContainerWrapper = withDispatch(\n\t( dispatch, ownProps, registry ) => ( {\n\t\t/**\n\t\t * Update all child Column blocks with a new vertical alignment setting\n\t\t * based on whatever alignment is passed in. This allows change to parent\n\t\t * to overide anything set on a individual column basis.\n\t\t *\n\t\t * @param {string} verticalAlignment the vertical alignment setting\n\t\t */\n\t\tupdateAlignment( verticalAlignment ) {\n\t\t\tconst { clientId, setAttributes } = ownProps;\n\t\t\tconst { updateBlockAttributes } = dispatch( 'core/block-editor' );\n\t\t\tconst { getBlockOrder } = registry.select( 'core/block-editor' );\n\n\t\t\t// Update own alignment.\n\t\t\tsetAttributes( { verticalAlignment } );\n\n\t\t\t// Update all child Column Blocks to match\n\t\t\tconst innerBlockClientIds = getBlockOrder( clientId );\n\t\t\tinnerBlockClientIds.forEach( ( innerBlockClientId ) => {\n\t\t\t\tupdateBlockAttributes( innerBlockClientId, {\n\t\t\t\t\tverticalAlignment,\n\t\t\t\t} );\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Updates the column count, including necessary revisions to child Column\n\t\t * blocks to grant required or redistribute available space.\n\t\t *\n\t\t * @param {number} previousColumns Previous column count.\n\t\t * @param {number} newColumns      New column count.\n\t\t */\n\t\tupdateColumns( previousColumns, newColumns ) {\n\t\t\tconst { clientId } = ownProps;\n\t\t\tconst { replaceInnerBlocks } = dispatch( 'core/block-editor' );\n\t\t\tconst { getBlocks } = registry.select( 'core/block-editor' );\n\n\t\t\tlet innerBlocks = getBlocks( clientId );\n\t\t\tconst hasExplicitWidths = hasExplicitColumnWidths( innerBlocks );\n\n\t\t\t// Redistribute available width for existing inner blocks.\n\t\t\tconst isAddingColumn = newColumns > previousColumns;\n\n\t\t\tif ( isAddingColumn && hasExplicitWidths ) {\n\t\t\t\t// If adding a new column, assign width to the new column equal to\n\t\t\t\t// as if it were `1 / columns` of the total available space.\n\t\t\t\tconst newColumnWidth = toWidthPrecision( 100 / newColumns );\n\n\t\t\t\t// Redistribute in consideration of pending block insertion as\n\t\t\t\t// constraining the available working width.\n\t\t\t\tconst widths = getRedistributedColumnWidths(\n\t\t\t\t\tinnerBlocks,\n\t\t\t\t\t100 - newColumnWidth\n\t\t\t\t);\n\n\t\t\t\tinnerBlocks = [\n\t\t\t\t\t...getMappedColumnWidths( innerBlocks, widths ),\n\t\t\t\t\t...times( newColumns - previousColumns, () => {\n\t\t\t\t\t\treturn createBlock( 'core/column', {\n\t\t\t\t\t\t\twidth: newColumnWidth,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} ),\n\t\t\t\t];\n\t\t\t} else if ( isAddingColumn ) {\n\t\t\t\tinnerBlocks = [\n\t\t\t\t\t...innerBlocks,\n\t\t\t\t\t...times( newColumns - previousColumns, () => {\n\t\t\t\t\t\treturn createBlock( 'core/column' );\n\t\t\t\t\t} ),\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\t// The removed column will be the last of the inner blocks.\n\t\t\t\tinnerBlocks = dropRight(\n\t\t\t\t\tinnerBlocks,\n\t\t\t\t\tpreviousColumns - newColumns\n\t\t\t\t);\n\n\t\t\t\tif ( hasExplicitWidths ) {\n\t\t\t\t\t// Redistribute as if block is already removed.\n\t\t\t\t\tconst widths = getRedistributedColumnWidths(\n\t\t\t\t\t\tinnerBlocks,\n\t\t\t\t\t\t100\n\t\t\t\t\t);\n\n\t\t\t\t\tinnerBlocks = getMappedColumnWidths( innerBlocks, widths );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treplaceInnerBlocks( clientId, innerBlocks, false );\n\t\t},\n\t} )\n)( ColumnsEditContainer );\n\nconst createBlocksFromInnerBlocksTemplate = ( innerBlocksTemplate ) => {\n\treturn map(\n\t\tinnerBlocksTemplate,\n\t\t( [ name, attributes, innerBlocks = [] ] ) =>\n\t\t\tcreateBlock(\n\t\t\t\tname,\n\t\t\t\tattributes,\n\t\t\t\tcreateBlocksFromInnerBlocksTemplate( innerBlocks )\n\t\t\t)\n\t);\n};\n\nconst ColumnsEdit = ( props ) => {\n\tconst { clientId, name } = props;\n\tconst {\n\t\tblockType,\n\t\tdefaultVariation,\n\t\thasInnerBlocks,\n\t\tvariations,\n\t} = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\t__experimentalGetBlockVariations,\n\t\t\t\tgetBlockType,\n\t\t\t\t__experimentalGetDefaultBlockVariation,\n\t\t\t} = select( 'core/blocks' );\n\n\t\t\treturn {\n\t\t\t\tblockType: getBlockType( name ),\n\t\t\t\tdefaultVariation: __experimentalGetDefaultBlockVariation(\n\t\t\t\t\tname,\n\t\t\t\t\t'block'\n\t\t\t\t),\n\t\t\t\thasInnerBlocks:\n\t\t\t\t\tselect( 'core/block-editor' ).getBlocks( clientId ).length >\n\t\t\t\t\t0,\n\t\t\t\tvariations: __experimentalGetBlockVariations( name, 'block' ),\n\t\t\t};\n\t\t},\n\t\t[ clientId, name ]\n\t);\n\n\tconst { replaceInnerBlocks } = useDispatch( 'core/block-editor' );\n\n\tif ( hasInnerBlocks ) {\n\t\treturn <ColumnsEditContainerWrapper { ...props } />;\n\t}\n\n\treturn (\n\t\t<__experimentalBlockVariationPicker\n\t\t\ticon={ get( blockType, [ 'icon', 'src' ] ) }\n\t\t\tlabel={ get( blockType, [ 'title' ] ) }\n\t\t\tvariations={ variations }\n\t\t\tonSelect={ ( nextVariation = defaultVariation ) => {\n\t\t\t\tif ( nextVariation.attributes ) {\n\t\t\t\t\tprops.setAttributes( nextVariation.attributes );\n\t\t\t\t}\n\t\t\t\tif ( nextVariation.innerBlocks ) {\n\t\t\t\t\treplaceInnerBlocks(\n\t\t\t\t\t\tprops.clientId,\n\t\t\t\t\t\tcreateBlocksFromInnerBlocksTemplate(\n\t\t\t\t\t\t\tnextVariation.innerBlocks\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} }\n\t\t\tallowSkip\n\t\t/>\n\t);\n};\n\nexport default ColumnsEdit;\n"]}