import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { View } from 'react-native';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { Component } from '@wordpress/element';
import { createBlock } from '@wordpress/blocks';
import { AlignmentToolbar, BlockControls, RichText } from '@wordpress/block-editor';
/**
 * Internal dependencies
 */

var name = 'core/paragraph';

var ParagraphEdit =
/*#__PURE__*/
function (_Component) {
  _inherits(ParagraphEdit, _Component);

  function ParagraphEdit(props) {
    var _this;

    _classCallCheck(this, ParagraphEdit);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ParagraphEdit).call(this, props));
    _this.onReplace = _this.onReplace.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ParagraphEdit, [{
    key: "onReplace",
    value: function onReplace(blocks) {
      var _this$props = this.props,
          attributes = _this$props.attributes,
          onReplace = _this$props.onReplace;
      onReplace(blocks.map(function (block, index) {
        return index === 0 && block.name === name ? _objectSpread({}, block, {
          attributes: _objectSpread({}, attributes, {}, block.attributes)
        }) : block;
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          attributes = _this$props2.attributes,
          setAttributes = _this$props2.setAttributes,
          mergeBlocks = _this$props2.mergeBlocks,
          onReplace = _this$props2.onReplace,
          style = _this$props2.style;
      var align = attributes.align,
          content = attributes.content,
          placeholder = attributes.placeholder;
      return createElement(View, null, createElement(BlockControls, null, createElement(AlignmentToolbar, {
        isCollapsed: false,
        value: align,
        onChange: function onChange(nextAlign) {
          setAttributes({
            align: nextAlign
          });
        }
      })), createElement(RichText, {
        identifier: "content",
        tagName: "p",
        value: content,
        deleteEnter: true,
        style: style,
        onChange: function onChange(nextContent) {
          setAttributes({
            content: nextContent
          });
        },
        onSplit: function onSplit(value) {
          if (!value) {
            return createBlock(name);
          }

          return createBlock(name, _objectSpread({}, attributes, {
            content: value
          }));
        },
        onMerge: mergeBlocks,
        onReplace: onReplace,
        onRemove: onReplace ? function () {
          return onReplace([]);
        } : undefined,
        placeholder: placeholder || __('Start writingâ€¦'),
        textAlign: align
      }));
    }
  }]);

  return ParagraphEdit;
}(Component);

export default ParagraphEdit;
//# sourceMappingURL=edit.native.js.map