import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import classnames from 'classnames';
import { escape } from 'lodash';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { useCallback, useState } from '@wordpress/element';
import { compose } from '@wordpress/compose';
import { KeyboardShortcuts, PanelBody, RangeControl, TextControl, ToggleControl, withFallbackStyles, ToolbarButton, ToolbarGroup, Popover } from '@wordpress/components';
import { BlockControls, __experimentalUseGradient, ContrastChecker, InspectorControls, __experimentalPanelColorGradientSettings as PanelColorGradientSettings, RichText, withColors, __experimentalLinkControl as LinkControl } from '@wordpress/block-editor';
import { rawShortcut, displayShortcut } from '@wordpress/keycodes';
var _window = window,
    getComputedStyle = _window.getComputedStyle;
var applyFallbackStyles = withFallbackStyles(function (node, ownProps) {
  var textColor = ownProps.textColor,
      backgroundColor = ownProps.backgroundColor;
  var backgroundColorValue = backgroundColor && backgroundColor.color;
  var textColorValue = textColor && textColor.color; //avoid the use of querySelector if textColor color is known and verify if node is available.

  var textNode = !textColorValue && node ? node.querySelector('[contenteditable="true"]') : null;
  return {
    fallbackBackgroundColor: backgroundColorValue || !node ? undefined : getComputedStyle(node).backgroundColor,
    fallbackTextColor: textColorValue || !textNode ? undefined : getComputedStyle(textNode).color
  };
});
var NEW_TAB_REL = 'noreferrer noopener';
var MIN_BORDER_RADIUS_VALUE = 0;
var MAX_BORDER_RADIUS_VALUE = 50;
var INITIAL_BORDER_RADIUS_POSITION = 5;

function BorderPanel(_ref) {
  var _ref$borderRadius = _ref.borderRadius,
      borderRadius = _ref$borderRadius === void 0 ? '' : _ref$borderRadius,
      setAttributes = _ref.setAttributes;
  var setBorderRadius = useCallback(function (newBorderRadius) {
    setAttributes({
      borderRadius: newBorderRadius
    });
  }, [setAttributes]);
  return createElement(PanelBody, {
    title: __('Border settings')
  }, createElement(RangeControl, {
    value: borderRadius,
    label: __('Border Radius'),
    min: MIN_BORDER_RADIUS_VALUE,
    max: MAX_BORDER_RADIUS_VALUE,
    initialPosition: INITIAL_BORDER_RADIUS_POSITION,
    allowReset: true,
    onChange: setBorderRadius
  }));
}

function URLPicker(_ref2) {
  var isSelected = _ref2.isSelected,
      url = _ref2.url,
      title = _ref2.title,
      setAttributes = _ref2.setAttributes,
      opensInNewTab = _ref2.opensInNewTab,
      onToggleOpenInNewTab = _ref2.onToggleOpenInNewTab;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isURLPickerOpen = _useState2[0],
      setIsURLPickerOpen = _useState2[1];

  var openLinkControl = function openLinkControl() {
    setIsURLPickerOpen(true);
  };

  var linkControl = isURLPickerOpen && createElement(Popover, {
    position: "bottom center",
    onClose: function onClose() {
      return setIsURLPickerOpen(false);
    }
  }, createElement(LinkControl, {
    className: "wp-block-navigation-link__inline-link-input",
    value: {
      url: url,
      title: title,
      opensInNewTab: opensInNewTab
    },
    onChange: function onChange(_ref3) {
      var _ref3$title = _ref3.title,
          newTitle = _ref3$title === void 0 ? '' : _ref3$title,
          _ref3$url = _ref3.url,
          newURL = _ref3$url === void 0 ? '' : _ref3$url,
          newOpensInNewTab = _ref3.opensInNewTab;
      setAttributes({
        title: escape(newTitle),
        url: newURL
      });

      if (opensInNewTab !== newOpensInNewTab) {
        onToggleOpenInNewTab(newOpensInNewTab);
      }
    }
  }));
  return createElement(Fragment, null, createElement(BlockControls, null, createElement(ToolbarGroup, null, createElement(ToolbarButton, {
    name: "link",
    icon: "admin-links",
    title: __('Link'),
    shortcut: displayShortcut.primary('k'),
    onClick: openLinkControl
  }))), isSelected && createElement(KeyboardShortcuts, {
    bindGlobal: true,
    shortcuts: _defineProperty({}, rawShortcut.primary('k'), openLinkControl)
  }), linkControl);
}

function ButtonEdit(_ref5) {
  var _classnames;

  var attributes = _ref5.attributes,
      backgroundColor = _ref5.backgroundColor,
      textColor = _ref5.textColor,
      setBackgroundColor = _ref5.setBackgroundColor,
      setTextColor = _ref5.setTextColor,
      fallbackBackgroundColor = _ref5.fallbackBackgroundColor,
      fallbackTextColor = _ref5.fallbackTextColor,
      setAttributes = _ref5.setAttributes,
      className = _ref5.className,
      isSelected = _ref5.isSelected;
  var borderRadius = attributes.borderRadius,
      linkTarget = attributes.linkTarget,
      placeholder = attributes.placeholder,
      rel = attributes.rel,
      text = attributes.text,
      title = attributes.title,
      url = attributes.url;
  var onSetLinkRel = useCallback(function (value) {
    setAttributes({
      rel: value
    });
  }, [setAttributes]);
  var onToggleOpenInNewTab = useCallback(function (value) {
    var newLinkTarget = value ? '_blank' : undefined;
    var updatedRel = rel;

    if (newLinkTarget && !rel) {
      updatedRel = NEW_TAB_REL;
    } else if (!newLinkTarget && rel === NEW_TAB_REL) {
      updatedRel = undefined;
    }

    setAttributes({
      linkTarget: newLinkTarget,
      rel: updatedRel
    });
  }, [rel, setAttributes]);

  var _experimentalUseGrad = __experimentalUseGradient(),
      gradientClass = _experimentalUseGrad.gradientClass,
      gradientValue = _experimentalUseGrad.gradientValue,
      setGradient = _experimentalUseGrad.setGradient;

  return createElement("div", {
    className: className,
    title: title
  }, createElement(RichText, {
    placeholder: placeholder || __('Add textâ€¦'),
    value: text,
    onChange: function onChange(value) {
      return setAttributes({
        text: value
      });
    },
    withoutInteractiveFormatting: true,
    className: classnames('wp-block-button__link', (_classnames = {
      'has-background': backgroundColor.color || gradientValue
    }, _defineProperty(_classnames, backgroundColor.class, !gradientValue && backgroundColor.class), _defineProperty(_classnames, 'has-text-color', textColor.color), _defineProperty(_classnames, textColor.class, textColor.class), _defineProperty(_classnames, gradientClass, gradientClass), _defineProperty(_classnames, 'no-border-radius', borderRadius === 0), _classnames)),
    style: _objectSpread({}, !backgroundColor.color && gradientValue ? {
      background: gradientValue
    } : {
      backgroundColor: backgroundColor.color
    }, {
      color: textColor.color,
      borderRadius: borderRadius ? borderRadius + 'px' : undefined
    })
  }), createElement(URLPicker, {
    title: title,
    url: url,
    setAttributes: setAttributes,
    isSelected: isSelected,
    opensInNewTab: linkTarget === '_blank',
    onToggleOpenInNewTab: onToggleOpenInNewTab
  }), createElement(InspectorControls, null, createElement(PanelColorGradientSettings, {
    title: __('Background & Text Color'),
    settings: [{
      colorValue: textColor.color,
      onColorChange: setTextColor,
      label: __('Text Color')
    }, {
      colorValue: backgroundColor.color,
      onColorChange: setBackgroundColor,
      gradientValue: gradientValue,
      onGradientChange: setGradient,
      label: __('Background')
    }]
  }, createElement(ContrastChecker, {
    // Text is considered large if font size is greater or equal to 18pt or 24px,
    // currently that's not the case for button.
    isLargeText: false,
    textColor: textColor.color,
    backgroundColor: backgroundColor.color,
    fallbackBackgroundColor: fallbackBackgroundColor,
    fallbackTextColor: fallbackTextColor
  })), createElement(BorderPanel, {
    borderRadius: borderRadius,
    setAttributes: setAttributes
  }), createElement(PanelBody, {
    title: __('Link settings')
  }, createElement(ToggleControl, {
    label: __('Open in new tab'),
    onChange: onToggleOpenInNewTab,
    checked: linkTarget === '_blank'
  }), createElement(TextControl, {
    label: __('Link rel'),
    value: rel || '',
    onChange: onSetLinkRel
  }))));
}

export default compose([withColors('backgroundColor', {
  textColor: 'color'
}), applyFallbackStyles])(ButtonEdit);
//# sourceMappingURL=edit.js.map