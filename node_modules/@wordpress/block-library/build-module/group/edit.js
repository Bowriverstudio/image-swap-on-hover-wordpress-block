import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { withSelect } from '@wordpress/data';
import { compose } from '@wordpress/compose';
import { InnerBlocks, __experimentalUseColors } from '@wordpress/block-editor';
import { useRef } from '@wordpress/element';

function GroupEdit(_ref) {
  var hasInnerBlocks = _ref.hasInnerBlocks;
  var ref = useRef();

  var _experimentalUseColo = __experimentalUseColors([{
    name: 'textColor',
    property: 'color'
  }, {
    name: 'backgroundColor',
    className: 'has-background'
  }], {
    contrastCheckers: {
      backgroundColor: true,
      textColor: true
    },
    colorDetector: {
      targetRef: ref
    }
  }),
      TextColor = _experimentalUseColo.TextColor,
      BackgroundColor = _experimentalUseColo.BackgroundColor,
      InspectorControlsColorPanel = _experimentalUseColo.InspectorControlsColorPanel;

  return createElement(Fragment, null, InspectorControlsColorPanel, createElement(BackgroundColor, null, createElement(TextColor, null, createElement("div", {
    className: "wp-block-group",
    ref: ref
  }, createElement("div", {
    className: "wp-block-group__inner-container"
  }, createElement(InnerBlocks, {
    renderAppender: !hasInnerBlocks && InnerBlocks.ButtonBlockAppender
  }))))));
}

export default compose([withSelect(function (select, _ref2) {
  var clientId = _ref2.clientId;

  var _select = select('core/block-editor'),
      getBlock = _select.getBlock;

  var block = getBlock(clientId);
  return {
    hasInnerBlocks: !!(block && block.innerBlocks.length)
  };
})])(GroupEdit);
//# sourceMappingURL=edit.js.map