"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _Toolbar = require("reakit/Toolbar");

var _dropdownMenu = _interopRequireDefault(require("../dropdown-menu"));

var _toolbarContext = _interopRequireDefault(require("../toolbar-context"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ToolbarGroupCollapsed(_ref) {
  var _ref$controls = _ref.controls,
      controls = _ref$controls === void 0 ? [] : _ref$controls,
      className = _ref.className,
      icon = _ref.icon,
      label = _ref.label,
      props = (0, _objectWithoutProperties2.default)(_ref, ["controls", "className", "icon", "label"]);
  // It'll contain state if `ToolbarGroup` is being used within
  // `<Toolbar __experimentalAccessibilityLabel="label" />`
  var accessibleToolbarState = (0, _element.useContext)(_toolbarContext.default);

  var renderDropdownMenu = function renderDropdownMenu(toggleProps) {
    return (0, _element.createElement)(_dropdownMenu.default, (0, _extends2.default)({
      hasArrowIndicator: true,
      icon: icon,
      label: label,
      controls: controls,
      className: className,
      toggleProps: toggleProps
    }, props));
  };

  if (accessibleToolbarState) {
    return (// https://reakit.io/docs/composition/#render-props
      (0, _element.createElement)(_Toolbar.ToolbarItem, accessibleToolbarState, function (toolbarItemHTMLProps) {
        return renderDropdownMenu(toolbarItemHTMLProps);
      })
    );
  }

  return renderDropdownMenu();
}

var _default = ToolbarGroupCollapsed;
exports.default = _default;
//# sourceMappingURL=toolbar-group-collapsed.js.map