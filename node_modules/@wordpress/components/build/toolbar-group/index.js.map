{"version":3,"sources":["@wordpress/components/src/toolbar-group/index.js"],"names":["ToolbarGroup","controls","children","className","isCollapsed","icon","title","otherProps","accessibleToolbarState","ToolbarContext","length","finalClassName","controlSets","Array","isArray","controlSet","indexOfSet","map","control","indexOfControl","join"],"mappings":";;;;;;;;;AASA;;;;;;AANA;;AACA;;AAUA;;AACA;;AACA;;AACA;;AAjBA;;;;AAMA;;;;AAKA;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAASA,YAAT,OAQI;AAAA,2BAPHC,QAOG;AAAA,MAPHA,QAOG,8BAPQ,EAOR;AAAA,MANHC,QAMG,QANHA,QAMG;AAAA,MALHC,SAKG,QALHA,SAKG;AAAA,MAJHC,WAIG,QAJHA,WAIG;AAAA,MAHHC,IAGG,QAHHA,IAGG;AAAA,MAFHC,KAEG,QAFHA,KAEG;AAAA,MADAC,UACA;AACH;AACA;AACA,MAAMC,sBAAsB,GAAG,yBAAYC,uBAAZ,CAA/B;;AAEA,MAAK,CAAE,CAAER,QAAF,IAAc,CAAEA,QAAQ,CAACS,MAA3B,KAAuC,CAAER,QAA9C,EAAyD;AACxD,WAAO,IAAP;AACA;;AAED,MAAMS,cAAc,GAAG,0BACtB;AACA;AACAH,EAAAA,sBAAsB,GAAG,0BAAH,GAAgC,oBAHhC,EAItBL,SAJsB,CAAvB,CATG,CAgBH;;AACA,MAAIS,WAAW,GAAGX,QAAlB;;AACA,MAAK,CAAEY,KAAK,CAACC,OAAN,CAAeF,WAAW,CAAE,CAAF,CAA1B,CAAP,EAA2C;AAC1CA,IAAAA,WAAW,GAAG,CAAEA,WAAF,CAAd;AACA;;AAED,MAAKR,WAAL,EAAmB;AAClB,WACC,4BAAC,8BAAD;AACC,MAAA,IAAI,EAAGC,IADR;AAEC,MAAA,KAAK,EAAGC,KAFT;AAGC,MAAA,QAAQ,EAAGM,WAHZ;AAIC,MAAA,SAAS,EAAGD,cAJb;AAKC,MAAA,QAAQ,EAAGT;AALZ,OAMMK,UANN,EADD;AAUA;;AAED,SACC,4BAAC,8BAAD;AAAuB,IAAA,SAAS,EAAGI;AAAnC,KAAyDJ,UAAzD,GACG,qBAASK,WAAT,EAAsB,UAAEG,UAAF,EAAcC,UAAd;AAAA,WACvBD,UAAU,CAACE,GAAX,CAAgB,UAAEC,OAAF,EAAWC,cAAX;AAAA,aACf,4BAAC,sBAAD;AACC,QAAA,GAAG,EAAG,CAAEH,UAAF,EAAcG,cAAd,EAA+BC,IAA/B,EADP;AAEC,QAAA,kBAAkB,EACjBJ,UAAU,GAAG,CAAb,IAAkBG,cAAc,KAAK,CAArC,GAAyC,kBAAzC,GAA8D;AAHhE,SAKMD,OALN,EADe;AAAA,KAAhB,CADuB;AAAA,GAAtB,CADH,EAYGhB,QAZH,CADD;AAgBA;;eAEcF,Y","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { flatMap } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useContext } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport ToolbarButton from '../toolbar-button';\nimport ToolbarGroupContainer from './toolbar-group-container';\nimport ToolbarGroupCollapsed from './toolbar-group-collapsed';\nimport ToolbarContext from '../toolbar-context';\n\n/**\n * Renders a collapsible group of controls\n *\n * The `controls` prop accepts an array of sets. A set is an array of controls.\n * Controls have the following shape:\n *\n * ```\n * {\n *   icon: string,\n *   title: string,\n *   subscript: string,\n *   onClick: Function,\n *   isActive: boolean,\n *   isDisabled: boolean\n * }\n * ```\n *\n * For convenience it is also possible to pass only an array of controls. It is\n * then assumed this is the only set.\n *\n * Either `controls` or `children` is required, otherwise this components\n * renders nothing.\n *\n * @param {Object}                props               Component props.\n * @param {Array}                 [props.controls]    The controls to render in this toolbar.\n * @param {WPElement}             [props.children]    Any other things to render inside the toolbar besides the controls.\n * @param {string}                [props.className]   Class to set on the container div.\n * @param {boolean}               [props.isCollapsed] Turns ToolbarGroup into a dropdown menu.\n * @param {WPBlockTypeIconRender} [props.icon]        The [Dashicon](https://developer.wordpress.org/resource/dashicons/) icon slug string, or an SVG WP element.\n * @param {string}                [props.label]       The menu item text.\n */\nfunction ToolbarGroup( {\n\tcontrols = [],\n\tchildren,\n\tclassName,\n\tisCollapsed,\n\ticon,\n\ttitle,\n\t...otherProps\n} ) {\n\t// It'll contain state if `ToolbarGroup` is being used within\n\t// `<Toolbar accessibilityLabel=\"label\" />`\n\tconst accessibleToolbarState = useContext( ToolbarContext );\n\n\tif ( ( ! controls || ! controls.length ) && ! children ) {\n\t\treturn null;\n\t}\n\n\tconst finalClassName = classnames(\n\t\t// Unfortunately, there's legacy code referencing to `.components-toolbar`\n\t\t// So we can't get rid of it\n\t\taccessibleToolbarState ? 'components-toolbar-group' : 'components-toolbar',\n\t\tclassName\n\t);\n\n\t// Normalize controls to nested array of objects (sets of controls)\n\tlet controlSets = controls;\n\tif ( ! Array.isArray( controlSets[ 0 ] ) ) {\n\t\tcontrolSets = [ controlSets ];\n\t}\n\n\tif ( isCollapsed ) {\n\t\treturn (\n\t\t\t<ToolbarGroupCollapsed\n\t\t\t\ticon={ icon }\n\t\t\t\tlabel={ title }\n\t\t\t\tcontrols={ controlSets }\n\t\t\t\tclassName={ finalClassName }\n\t\t\t\tchildren={ children }\n\t\t\t\t{ ...otherProps }\n\t\t\t/>\n\t\t);\n\t}\n\n\treturn (\n\t\t<ToolbarGroupContainer className={ finalClassName } { ...otherProps }>\n\t\t\t{ flatMap( controlSets, ( controlSet, indexOfSet ) =>\n\t\t\t\tcontrolSet.map( ( control, indexOfControl ) => (\n\t\t\t\t\t<ToolbarButton\n\t\t\t\t\t\tkey={ [ indexOfSet, indexOfControl ].join() }\n\t\t\t\t\t\tcontainerClassName={\n\t\t\t\t\t\t\tindexOfSet > 0 && indexOfControl === 0 ? 'has-left-divider' : null\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{ ...control }\n\t\t\t\t\t/>\n\t\t\t\t) )\n\t\t\t) }\n\t\t\t{ children }\n\t\t</ToolbarGroupContainer>\n\t);\n}\n\nexport default ToolbarGroup;\n"]}