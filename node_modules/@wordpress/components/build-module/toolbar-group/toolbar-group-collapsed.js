import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { ToolbarItem } from 'reakit/Toolbar';
/**
 * WordPress dependencies
 */

import { useContext } from '@wordpress/element';
/**
 * Internal dependencies
 */

import DropdownMenu from '../dropdown-menu';
import ToolbarContext from '../toolbar-context';

function ToolbarGroupCollapsed(_ref) {
  var _ref$controls = _ref.controls,
      controls = _ref$controls === void 0 ? [] : _ref$controls,
      className = _ref.className,
      icon = _ref.icon,
      label = _ref.label,
      props = _objectWithoutProperties(_ref, ["controls", "className", "icon", "label"]);

  // It'll contain state if `ToolbarGroup` is being used within
  // `<Toolbar __experimentalAccessibilityLabel="label" />`
  var accessibleToolbarState = useContext(ToolbarContext);

  var renderDropdownMenu = function renderDropdownMenu(toggleProps) {
    return createElement(DropdownMenu, _extends({
      hasArrowIndicator: true,
      icon: icon,
      label: label,
      controls: controls,
      className: className,
      toggleProps: toggleProps
    }, props));
  };

  if (accessibleToolbarState) {
    return (// https://reakit.io/docs/composition/#render-props
      createElement(ToolbarItem, accessibleToolbarState, function (toolbarItemHTMLProps) {
        return renderDropdownMenu(toolbarItemHTMLProps);
      })
    );
  }

  return renderDropdownMenu();
}

export default ToolbarGroupCollapsed;
//# sourceMappingURL=toolbar-group-collapsed.js.map