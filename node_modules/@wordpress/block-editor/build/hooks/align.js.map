{"version":3,"sources":["@wordpress/block-editor/src/hooks/align.js"],"names":["ALL_ALIGNMENTS","WIDE_ALIGNMENTS","getValidAlignments","blockAlign","hasWideBlockSupport","hasWideEnabled","validAlignments","Array","isArray","without","addAttribute","settings","attributes","align","type","withToolbarControls","BlockEdit","props","blockName","name","updateAlignment","nextAlign","blockType","blockDefaultAlign","setAttributes","length","isSelected","withDataAlign","BlockListBlock","select","getSettings","alignWide","undefined","wrapperProps","addAssignedAlign","isAlignValid","className"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { assign, get, has, includes, without } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { addFilter } from '@wordpress/hooks';\nimport {\n\tgetBlockSupport,\n\tgetBlockType,\n\thasBlockSupport,\n} from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { BlockControls, BlockAlignmentToolbar } from '../components';\n\n/**\n * An array which includes all possible valid alignments,\n * used to validate if an alignment is valid or not.\n *\n * @constant\n * @type {string[]}\n */\nconst ALL_ALIGNMENTS = [ 'left', 'center', 'right', 'wide', 'full' ];\n\n/**\n * An array which includes all wide alignments.\n * In order for this alignments to be valid they need to be supported by the block,\n * and by the theme.\n *\n * @constant\n * @type {string[]}\n */\nconst WIDE_ALIGNMENTS = [ 'wide', 'full' ];\n\n/**\n * Returns the valid alignments.\n * Takes into consideration the aligns supported by a block, if the block supports wide controls or not and if theme supports wide controls or not.\n * Exported just for testing purposes, not exported outside the module.\n *\n * @param {?boolean|string[]} blockAlign          Aligns supported by the block.\n * @param {?boolean}          hasWideBlockSupport True if block supports wide alignments. And False otherwise.\n * @param {?boolean}          hasWideEnabled      True if theme supports wide alignments. And False otherwise.\n *\n * @return {string[]} Valid alignments.\n */\nexport function getValidAlignments(\n\tblockAlign,\n\thasWideBlockSupport = true,\n\thasWideEnabled = true\n) {\n\tlet validAlignments;\n\tif ( Array.isArray( blockAlign ) ) {\n\t\tvalidAlignments = blockAlign;\n\t} else if ( blockAlign === true ) {\n\t\t// `true` includes all alignments...\n\t\tvalidAlignments = ALL_ALIGNMENTS;\n\t} else {\n\t\tvalidAlignments = [];\n\t}\n\n\tif (\n\t\t! hasWideEnabled ||\n\t\t( blockAlign === true && ! hasWideBlockSupport )\n\t) {\n\t\treturn without( validAlignments, ...WIDE_ALIGNMENTS );\n\t}\n\n\treturn validAlignments;\n}\n\n/**\n * Filters registered block settings, extending attributes to include `align`.\n *\n * @param  {Object} settings Original block settings\n * @return {Object}          Filtered block settings\n */\nexport function addAttribute( settings ) {\n\t// allow blocks to specify their own attribute definition with default values if needed.\n\tif ( has( settings.attributes, [ 'align', 'type' ] ) ) {\n\t\treturn settings;\n\t}\n\tif ( hasBlockSupport( settings, 'align' ) ) {\n\t\t// Use Lodash's assign to gracefully handle if attributes are undefined\n\t\tsettings.attributes = assign( settings.attributes, {\n\t\t\talign: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t} );\n\t}\n\n\treturn settings;\n}\n\n/**\n * Override the default edit UI to include new toolbar controls for block\n * alignment, if block defines support.\n *\n * @param  {Function} BlockEdit Original component\n * @return {Function}           Wrapped component\n */\nexport const withToolbarControls = createHigherOrderComponent(\n\t( BlockEdit ) => ( props ) => {\n\t\tconst { name: blockName } = props;\n\t\t// Compute valid alignments without taking into account,\n\t\t// if the theme supports wide alignments or not.\n\t\t// BlockAlignmentToolbar takes into account the theme support.\n\t\tconst validAlignments = getValidAlignments(\n\t\t\tgetBlockSupport( blockName, 'align' ),\n\t\t\thasBlockSupport( blockName, 'alignWide', true )\n\t\t);\n\n\t\tconst updateAlignment = ( nextAlign ) => {\n\t\t\tif ( ! nextAlign ) {\n\t\t\t\tconst blockType = getBlockType( props.name );\n\t\t\t\tconst blockDefaultAlign = get( blockType, [\n\t\t\t\t\t'attributes',\n\t\t\t\t\t'align',\n\t\t\t\t\t'default',\n\t\t\t\t] );\n\t\t\t\tif ( blockDefaultAlign ) {\n\t\t\t\t\tnextAlign = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tprops.setAttributes( { align: nextAlign } );\n\t\t};\n\n\t\treturn [\n\t\t\tvalidAlignments.length > 0 && props.isSelected && (\n\t\t\t\t<BlockControls key=\"align-controls\">\n\t\t\t\t\t<BlockAlignmentToolbar\n\t\t\t\t\t\tvalue={ props.attributes.align }\n\t\t\t\t\t\tonChange={ updateAlignment }\n\t\t\t\t\t\tcontrols={ validAlignments }\n\t\t\t\t\t/>\n\t\t\t\t</BlockControls>\n\t\t\t),\n\t\t\t<BlockEdit key=\"edit\" { ...props } />,\n\t\t];\n\t},\n\t'withToolbarControls'\n);\n\n/**\n * Override the default block element to add alignment wrapper props.\n *\n * @param  {Function} BlockListBlock Original component\n * @return {Function}                Wrapped component\n */\nexport const withDataAlign = createHigherOrderComponent(\n\t( BlockListBlock ) => ( props ) => {\n\t\tconst { name, attributes } = props;\n\t\tconst { align } = attributes;\n\t\tconst hasWideEnabled = useSelect(\n\t\t\t( select ) =>\n\t\t\t\t!! select( 'core/block-editor' ).getSettings().alignWide,\n\t\t\t[]\n\t\t);\n\n\t\t// If an alignment is not assigned, there's no need to go through the\n\t\t// effort to validate or assign its value.\n\t\tif ( align === undefined ) {\n\t\t\treturn <BlockListBlock { ...props } />;\n\t\t}\n\n\t\tconst validAlignments = getValidAlignments(\n\t\t\tgetBlockSupport( name, 'align' ),\n\t\t\thasBlockSupport( name, 'alignWide', true ),\n\t\t\thasWideEnabled\n\t\t);\n\n\t\tlet wrapperProps = props.wrapperProps;\n\t\tif ( includes( validAlignments, align ) ) {\n\t\t\twrapperProps = { ...wrapperProps, 'data-align': align };\n\t\t}\n\n\t\treturn <BlockListBlock { ...props } wrapperProps={ wrapperProps } />;\n\t}\n);\n\n/**\n * Override props assigned to save component to inject alignment class name if\n * block supports it.\n *\n * @param  {Object} props      Additional props applied to save element\n * @param  {Object} blockType  Block type\n * @param  {Object} attributes Block attributes\n * @return {Object}            Filtered props applied to save element\n */\nexport function addAssignedAlign( props, blockType, attributes ) {\n\tconst { align } = attributes;\n\tconst blockAlign = getBlockSupport( blockType, 'align' );\n\tconst hasWideBlockSupport = hasBlockSupport( blockType, 'alignWide', true );\n\tconst isAlignValid = includes(\n\t\t// Compute valid alignments without taking into account,\n\t\t// if the theme supports wide alignments or not.\n\t\t// This way changing themes does not impacts the block save.\n\t\tgetValidAlignments( blockAlign, hasWideBlockSupport ),\n\t\talign\n\t);\n\tif ( isAlignValid ) {\n\t\tprops.className = classnames( `align${ align }`, props.className );\n\t}\n\n\treturn props;\n}\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/align/addAttribute',\n\taddAttribute\n);\naddFilter(\n\t'editor.BlockListBlock',\n\t'core/editor/align/with-data-align',\n\twithDataAlign\n);\naddFilter(\n\t'editor.BlockEdit',\n\t'core/editor/align/with-toolbar-controls',\n\twithToolbarControls\n);\naddFilter(\n\t'blocks.getSaveContent.extraProps',\n\t'core/align/addAssignedAlign',\n\taddAssignedAlign\n);\n"]}