{"version":3,"sources":["@wordpress/notices/src/store/actions.js"],"names":["createNotice","status","DEFAULT_STATUS","content","options","speak","isDismissible","context","DEFAULT_CONTEXT","id","actions","type","__unstableHTML","String","message","ariaLive","notice","createSuccessNotice","createInfoNotice","createErrorNotice","createWarningNotice","removeNotice"],"mappings":";;;;;;;;;;;;;;;;AAGA;;AAKA;;;;0BAmCiBA,Y;;AAjCjB;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;AAsBO,SAAUA,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACNC,UAAAA,MADM,2DACGC,yBADH;AAENC,UAAAA,OAFM;AAGNC,UAAAA,OAHM,2DAGI,EAHJ;AAAA,2BAaFA,OAbE,CAMLC,KANK,EAMLA,KANK,+BAMG,IANH,2CAaFD,OAbE,CAOLE,aAPK,EAOLA,aAPK,sCAOW,IAPX,6CAaFF,OAbE,CAQLG,OARK,EAQLA,OARK,iCAQKC,0BARL,mCAaFJ,OAbE,CASLK,EATK,EASLA,EATK,4BASA,sBAAUF,OAAV,CATA,mCAaFH,OAbE,CAULM,OAVK,EAULA,OAVK,iCAUK,EAVL,qCAaFN,OAbE,CAWLO,IAXK,EAWLA,IAXK,8BAWE,SAXF,kBAYLC,cAZK,GAaFR,OAbE,CAYLQ,cAZK,EAeN;AACA;AACA;;AACAT,UAAAA,OAAO,GAAGU,MAAM,CAAEV,OAAF,CAAhB;;AAlBM,eAoBDE,KApBC;AAAA;AAAA;AAAA;;AAAA;AAqBL,iBAAM;AACLM,YAAAA,IAAI,EAAE,OADD;AAELG,YAAAA,OAAO,EAAEX,OAFJ;AAGLY,YAAAA,QAAQ,EAAEJ,IAAI,KAAK,UAAT,GAAsB,QAAtB,GAAiC;AAHtC,WAAN;;AArBK;AAAA;AA4BN,iBAAM;AACLA,YAAAA,IAAI,EAAE,eADD;AAELJ,YAAAA,OAAO,EAAPA,OAFK;AAGLS,YAAAA,MAAM,EAAE;AACPP,cAAAA,EAAE,EAAFA,EADO;AAEPR,cAAAA,MAAM,EAANA,MAFO;AAGPE,cAAAA,OAAO,EAAPA,OAHO;AAIPS,cAAAA,cAAc,EAAdA,cAJO;AAKPN,cAAAA,aAAa,EAAbA,aALO;AAMPI,cAAAA,OAAO,EAAPA,OANO;AAOPC,cAAAA,IAAI,EAAJA;AAPO;AAHH,WAAN;;AA5BM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2CP;;;;;;;;;;;;;AAWO,SAASM,mBAAT,CAA8Bd,OAA9B,EAAuCC,OAAvC,EAAiD;AACvD,SAAOJ,YAAY,CAAE,SAAF,EAAaG,OAAb,EAAsBC,OAAtB,CAAnB;AACA;AAED;;;;;;;;;;;;;AAWO,SAASc,gBAAT,CAA2Bf,OAA3B,EAAoCC,OAApC,EAA8C;AACpD,SAAOJ,YAAY,CAAE,MAAF,EAAUG,OAAV,EAAmBC,OAAnB,CAAnB;AACA;AAED;;;;;;;;;;;;;AAWO,SAASe,iBAAT,CAA4BhB,OAA5B,EAAqCC,OAArC,EAA+C;AACrD,SAAOJ,YAAY,CAAE,OAAF,EAAWG,OAAX,EAAoBC,OAApB,CAAnB;AACA;AAED;;;;;;;;;;;;;AAWO,SAASgB,mBAAT,CAA8BjB,OAA9B,EAAuCC,OAAvC,EAAiD;AACvD,SAAOJ,YAAY,CAAE,SAAF,EAAaG,OAAb,EAAsBC,OAAtB,CAAnB;AACA;AAED;;;;;;;;;;;AASO,SAASiB,YAAT,CAAuBZ,EAAvB,EAAuD;AAAA,MAA5BF,OAA4B,uEAAlBC,0BAAkB;AAC7D,SAAO;AACNG,IAAAA,IAAI,EAAE,eADA;AAENF,IAAAA,EAAE,EAAFA,EAFM;AAGNF,IAAAA,OAAO,EAAPA;AAHM,GAAP;AAKA","sourcesContent":["/**\n * External dependencies\n */\nimport { uniqueId } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { DEFAULT_CONTEXT, DEFAULT_STATUS } from './constants';\n\n/**\n * @typedef {Object} WPNoticeAction Object describing a user action option associated with a notice.\n *\n * @property {string}    label    Message to use as action label.\n * @property {?string}   url      Optional URL of resource if action incurs\n *                                browser navigation.\n * @property {?Function} onClick  Optional function to invoke when action is\n *                                triggered by user.\n *\n */\n\n/**\n * Yields action objects used in signalling that a notice is to be created.\n *\n * @param {string}                [status='info']              Notice status.\n * @param {string}                content                      Notice message.\n * @param {Object}                [options]                    Notice options.\n * @param {string}                [options.context='global']   Context under which to\n *                                                             group notice.\n * @param {string}                [options.id]                 Identifier for notice.\n *                                                             Automatically assigned\n *                                                             if not specified.\n * @param {boolean}               [options.isDismissible=true] Whether the notice can\n *                                                             be dismissed by user.\n * @param {string}                [options.type='default']     Type of notice, one of\n *                                                             `default`, or `snackbar`.\n * @param {boolean}               [options.speak=true]         Whether the notice\n *                                                             content should be\n *                                                             announced to screen\n *                                                             readers.\n * @param {Array<WPNoticeAction>} [options.actions]            User actions to be\n *                                                             presented with notice.\n */\nexport function* createNotice(\n\tstatus = DEFAULT_STATUS,\n\tcontent,\n\toptions = {}\n) {\n\tconst {\n\t\tspeak = true,\n\t\tisDismissible = true,\n\t\tcontext = DEFAULT_CONTEXT,\n\t\tid = uniqueId( context ),\n\t\tactions = [],\n\t\ttype = 'default',\n\t\t__unstableHTML,\n\t} = options;\n\n\t// The supported value shape of content is currently limited to plain text\n\t// strings. To avoid setting expectation that e.g. a WPElement could be\n\t// supported, cast to a string.\n\tcontent = String( content );\n\n\tif ( speak ) {\n\t\tyield {\n\t\t\ttype: 'SPEAK',\n\t\t\tmessage: content,\n\t\t\tariaLive: type === 'snackbar' ? 'polite' : 'assertive',\n\t\t};\n\t}\n\n\tyield {\n\t\ttype: 'CREATE_NOTICE',\n\t\tcontext,\n\t\tnotice: {\n\t\t\tid,\n\t\t\tstatus,\n\t\t\tcontent,\n\t\t\t__unstableHTML,\n\t\t\tisDismissible,\n\t\t\tactions,\n\t\t\ttype,\n\t\t},\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a success notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string} content   Notice message.\n * @param {Object} [options] Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createSuccessNotice( content, options ) {\n\treturn createNotice( 'success', content, options );\n}\n\n/**\n * Returns an action object used in signalling that an info notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string} content   Notice message.\n * @param {Object} [options] Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createInfoNotice( content, options ) {\n\treturn createNotice( 'info', content, options );\n}\n\n/**\n * Returns an action object used in signalling that an error notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string} content   Notice message.\n * @param {Object} [options] Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createErrorNotice( content, options ) {\n\treturn createNotice( 'error', content, options );\n}\n\n/**\n * Returns an action object used in signalling that a warning notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string} content   Notice message.\n * @param {Object} [options] Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createWarningNotice( content, options ) {\n\treturn createNotice( 'warning', content, options );\n}\n\n/**\n * Returns an action object used in signalling that a notice is to be removed.\n *\n * @param {string} id                 Notice unique identifier.\n * @param {string} [context='global'] Optional context (grouping) in which the notice is\n *                                    intended to appear. Defaults to default context.\n *\n * @return {Object} Action object.\n */\nexport function removeNotice( id, context = DEFAULT_CONTEXT ) {\n\treturn {\n\t\ttype: 'REMOVE_NOTICE',\n\t\tid,\n\t\tcontext,\n\t};\n}\n"]}